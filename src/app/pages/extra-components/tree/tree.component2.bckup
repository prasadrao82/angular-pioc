  import {CollectionViewer, SelectionChange} from '@angular/cdk/collections';
  import {FlatTreeControl} from '@angular/cdk/tree';
  import {Component, Injectable} from '@angular/core';
  import {BehaviorSubject, merge, Observable} from 'rxjs';
  import {map} from 'rxjs/operators';

/** Flat node with expandable and level information */
  export class DynamicFlatNode {
    constructor(public item: string, public level = 1, public expandable = false,
                public isLoading = false) {}
  }

export class DynamicDatabase {
    dataMap = new Map<string, string[]>([
      ['Plano', ['Panic Camera', 'Intrusion Detection Camera', 'Licence Plate Recognition Camera']],
      ['Charter', ['GPS Tracker', 'Soil Sensor', 'Temperature Sensor']],
      ['Raiway', ['Intrusion Detection Camera', 'Licence Plate Recognition Camera']],
      ['Munich', ['Air Quality Monitor', 'Environmental Sensor', 'Intrusion Detection Camera']],
    ]);

    rootLevelNodes: string[] = ['Plano', 'Charter', 'Raiway', 'Munich'];

    /** Initial data from database */
    initialData(): DynamicFlatNode[] {
      return this.rootLevelNodes.map(name => new DynamicFlatNode(name, 0, true));
    }

    getChildren(node: string): string[] | undefined {
      return this.dataMap.get(node);
    }

    isExpandable(node: string): boolean {
      return this.dataMap.has(node);
    }
  }

@Injectable()
export class DynamicDataSource {

    dataChange = new BehaviorSubject<DynamicFlatNode[]>([]);

    get data(): DynamicFlatNode[] { return this.dataChange.value; }
    set data(value: DynamicFlatNode[]) {
      this.treeControl.dataNodes = value;
      this.dataChange.next(value);
    }

    constructor(private treeControl: FlatTreeControl<DynamicFlatNode>,
                private database: DynamicDatabase) {}

    connect(collectionViewer: CollectionViewer): Observable<DynamicFlatNode[]> {
      this.treeControl.expansionModel.onChange.subscribe(change => {
        if ((change as SelectionChange<DynamicFlatNode>).added ||
          (change as SelectionChange<DynamicFlatNode>).removed) {
          this.handleTreeControl(change as SelectionChange<DynamicFlatNode>);
        }
      });

      return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));
    }

    /** Handle expand/collapse behaviors */
    handleTreeControl(change: SelectionChange<DynamicFlatNode>) {
      if (change.added) {
        change.added.forEach(node => this.toggleNode(node, true));
      }
      if (change.removed) {
        change.removed.slice().reverse().forEach(node => this.toggleNode(node, false));
      }
    }

    /**
     * Toggle the node, remove from display list
     */
    toggleNode(node: DynamicFlatNode, expand: boolean) {
      const children = this.database.getChildren(node.item);
      const index = this.data.indexOf(node);
      if (!children || index < 0) { // If no children, or cannot find the node, no op
        return;
      }

      node.isLoading = true;

      setTimeout(() => {
        if (expand) {
          const nodes = children.map(name =>
            new DynamicFlatNode(name, node.level + 1, this.database.isExpandable(name)));
          this.data.splice(index + 1, 0, ...nodes);
        } else {
          let count = 0;
          for (let i = index + 1; i < this.data.length
            && this.data[i].level > node.level; i++, count++) {}
          this.data.splice(index + 1, count);
        }

        // notify the change
        this.dataChange.next(this.data);
        node.isLoading = false;
      }, 1000);
    }
  }


@Component({
  selector: 'ngx-tree',
  templateUrl: './tree.component.html',
  styleUrls: ['./tree.component.scss'],
  providers: [DynamicDatabase]
})
export class TreeComponent {

  constructor(database: DynamicDatabase) {
      this.treeControl = new FlatTreeControl<DynamicFlatNode>(this.getLevel, this.isExpandable);
      this.dataSource = new DynamicDataSource(this.treeControl, database);

      this.dataSource.data = database.initialData();
    }

    treeControl: FlatTreeControl<DynamicFlatNode>;

    dataSource: DynamicDataSource;

    getLevel = (node: DynamicFlatNode) => node.level;

    isExpandable = (node: DynamicFlatNode) => node.expandable;

    hasChild = (_: number, _nodeData: DynamicFlatNode) => _nodeData.expandable;
  }

